[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing countSameConsecutive5.c (with preprocessing)
[wp] Running WP plugin...
[wp] warning: Missing RTE guards
[wp] 40 goals scheduled
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_post_4 : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_post : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_post_2 : Unknown (211ms)
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_post_3 : Unknown (Qed:4ms) (265ms)
[wp] [Qed] Goal typed_countSameConsecutive_assert : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_post_6 : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_established : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_2_preserved : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_2_established : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_loop_inv_preserved : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_post_5 : Unknown (Qed:4ms) (325ms)
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_4_preserved : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_3_established : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_4_established : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_5_established : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_loop_inv_3_preserved : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_post_7 : Unknown (336ms)
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_7_preserved : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_6_established : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_7_established : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_8_established : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_loop_inv_5_preserved : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_9_established : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_inv_9_preserved : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_loop_inv_6_preserved : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_loop_inv_10_established : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_loop_inv_10_preserved : Valid
[wp] [Qed] Goal typed_countSameConsecutive_assert_4 : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_loop_inv_8_preserved : Unknown (Qed:12ms) (272ms)
[wp] [Qed] Goal typed_countSameConsecutive_loop_assign_part1 : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_assign_part2 : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_assert_2 : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_assign_2 : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_assign_part3 : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_term_positive : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_term_decrease : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_assert_3 : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_term_2_positive : Valid
[wp] [Qed] Goal typed_countSameConsecutive_loop_term_2_decrease : Valid
[wp] [Alt-Ergo] Goal typed_countSameConsecutive_assert_5 : Valid
[wp] Proved goals:   35 / 40
     Qed:            23  (4ms-7ms-12ms)
     Alt-Ergo:       12  (12ms-29ms-104ms) (307) (unknown: 5)
------------------------------------------------------------
  Function countSameConsecutive
------------------------------------------------------------

Goal Post-condition (file countSameConsecutive5.c, line 29) in 'countSameConsecutive':
Let x_1 = Mint_0[shift_sint32(x, i)].
Let x_2 = Mint_0[shift_sint32(x, i - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(countSameConsecutive_0) /\ is_sint32(i) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (!P_all_equal_in_range(Mint_0, x, i_1, 1 + countSameConsecutive_0)))))).
  (* Invariant *)
  Have: ((0 < i) -> ((i < N) -> (x_1 != x_2))).
  (* Invariant *)
  Have: ((0 < i) ->
      (exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
       P_all_equal_in_range(Mint_0, x, i_1, countSameConsecutive_0))).
  (* Invariant *)
  Have: ((0 < i) -> (0 < countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 < i) ->
      ((0 < countSameConsecutive_0) /\ (countSameConsecutive_0 <= N))).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: (i <= N) /\ (0 <= i).
  (* Else *)
  Have: N <= i.
  (* Assertion *)
  Have: countSameConsecutive_0 <= i.
}
Prove: exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
    P_all_equal_in_range(Mint_0, x, i_1, countSameConsecutive_0).
Prover Alt-Ergo returns Valid (Qed:4ms) (28ms) (33)

------------------------------------------------------------

Goal Post-condition (file countSameConsecutive5.c, line 31) in 'countSameConsecutive':
Let x_1 = Mint_0[shift_sint32(x, i)].
Let x_2 = Mint_0[shift_sint32(x, i - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(countSameConsecutive_0) /\ is_sint32(i) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (!P_all_equal_in_range(Mint_0, x, i_1, 1 + countSameConsecutive_0)))))).
  (* Invariant *)
  Have: ((0 < i) -> ((i < N) -> (x_1 != x_2))).
  (* Invariant *)
  Have: ((0 < i) ->
      (exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
       P_all_equal_in_range(Mint_0, x, i_1, countSameConsecutive_0))).
  (* Invariant *)
  Have: ((0 < i) -> (0 < countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 < i) ->
      ((0 < countSameConsecutive_0) /\ (countSameConsecutive_0 <= N))).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: (i <= N) /\ (0 <= i).
  (* Else *)
  Have: N <= i.
  (* Assertion *)
  Have: countSameConsecutive_0 <= i.
}
Prove: P_best_is_best(Mint_0, x, i, i, countSameConsecutive_0).
Prover Alt-Ergo returns Unknown (211ms)

------------------------------------------------------------

Goal Post-condition (file countSameConsecutive5.c, line 33) in 'countSameConsecutive':
Let x_1 = Mint_0[shift_sint32(x, i_1)].
Let x_2 = Mint_0[shift_sint32(x, i_1 - 1)].
Let a = shift_sint32(x, 0).
Let x_3 = countSameConsecutive_0 + i.
Assume {
  Type: is_sint32(N) /\ is_sint32(countSameConsecutive_0) /\
      is_sint32(i_1) /\ is_sint32(Mint_0[shift_sint32(x, -1)]) /\
      is_sint32(Mint_0[a]) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < N) /\ (x_3 < N) /\
      P_all_equal_in_range(Mint_0, x, i, countSameConsecutive_0).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (!P_all_equal_in_range(Mint_0, x, i_2, 1 + countSameConsecutive_0)))))).
  (* Invariant *)
  Have: ((0 < i_1) -> ((i_1 < N) -> (x_1 != x_2))).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (exists i_2 : Z. (0 <= i_2) /\ (i_2 < i_1) /\
       P_all_equal_in_range(Mint_0, x, i_2, countSameConsecutive_0))).
  (* Invariant *)
  Have: ((0 < i_1) -> (0 < countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 < i_1) ->
      ((0 < countSameConsecutive_0) /\ (countSameConsecutive_0 <= N))).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: (i_1 <= N) /\ (0 <= i_1).
  (* Else *)
  Have: N <= i_1.
  (* Assertion *)
  Have: countSameConsecutive_0 <= i_1.
}
Prove: Mint_0[shift_sint32(x, i)] != Mint_0[shift_sint32(x, x_3)].
Prover Alt-Ergo returns Unknown (Qed:4ms) (265ms)

------------------------------------------------------------

Goal Post-condition (file countSameConsecutive5.c, line 35) in 'countSameConsecutive':
Let x_1 = Mint_0[shift_sint32(x, i_1)].
Let x_2 = Mint_0[shift_sint32(x, i_1 - 1)].
Let x_3 = 1 + countSameConsecutive_0.
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(countSameConsecutive_0) /\
      is_sint32(i_1) /\ is_sint32(Mint_0[shift_sint32(x, -1)]) /\
      is_sint32(Mint_0[a]) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < N).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (!P_all_equal_in_range(Mint_0, x, i_2, x_3)))))).
  (* Invariant *)
  Have: ((0 < i_1) -> ((i_1 < N) -> (x_1 != x_2))).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (exists i_2 : Z. (0 <= i_2) /\ (i_2 < i_1) /\
       P_all_equal_in_range(Mint_0, x, i_2, countSameConsecutive_0))).
  (* Invariant *)
  Have: ((0 < i_1) -> (0 < countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 < i_1) ->
      ((0 < countSameConsecutive_0) /\ (countSameConsecutive_0 <= N))).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: (i_1 <= N) /\ (0 <= i_1).
  (* Else *)
  Have: N <= i_1.
  (* Assertion *)
  Have: countSameConsecutive_0 <= i_1.
}
Prove: !P_all_equal_in_range(Mint_0, x, i, x_3).
Prover Alt-Ergo returns Valid (20ms) (36)

------------------------------------------------------------

Goal Post-condition (file countSameConsecutive5.c, line 37) in 'countSameConsecutive':
Let x_1 = Mint_0[shift_sint32(x, i)].
Let x_2 = Mint_0[shift_sint32(x, i - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(countSameConsecutive_0) /\ is_sint32(i) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (!P_all_equal_in_range(Mint_0, x, i_1, 1 + countSameConsecutive_0)))))).
  (* Invariant *)
  Have: ((0 < i) -> ((i < N) -> (x_1 != x_2))).
  (* Invariant *)
  Have: ((0 < i) ->
      (exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
       P_all_equal_in_range(Mint_0, x, i_1, countSameConsecutive_0))).
  (* Invariant *)
  Have: ((0 < i) -> (0 < countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 < i) ->
      ((0 < countSameConsecutive_0) /\ (countSameConsecutive_0 <= N))).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: (i <= N) /\ (0 <= i).
  (* Else *)
  Have: N <= i.
  (* Assertion *)
  Have: countSameConsecutive_0 <= i.
}
Prove: !(exists i_1 : Z. let x_3 = countSameConsecutive_0 + i_1 in
         (Mint_0[shift_sint32(x, i_1)] = Mint_0[shift_sint32(x, x_3)]) /\
         (0 <= i_1) /\ (i_1 < i) /\ (x_3 < i) /\
         P_all_equal_in_range(Mint_0, x, i_1, countSameConsecutive_0)).
Prover Alt-Ergo returns Unknown (Qed:4ms) (325ms)

------------------------------------------------------------

Goal Post-condition (file countSameConsecutive5.c, line 39) in 'countSameConsecutive':
Let x_1 = Mint_0[shift_sint32(x, i)].
Let x_2 = Mint_0[shift_sint32(x, i - 1)].
Let x_3 = 1 + countSameConsecutive_0.
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(countSameConsecutive_0) /\ is_sint32(i) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (!P_all_equal_in_range(Mint_0, x, i_1, x_3)))))).
  (* Invariant *)
  Have: ((0 < i) -> ((i < N) -> (x_1 != x_2))).
  (* Invariant *)
  Have: ((0 < i) ->
      (exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
       P_all_equal_in_range(Mint_0, x, i_1, countSameConsecutive_0))).
  (* Invariant *)
  Have: ((0 < i) -> (0 < countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 < i) ->
      ((0 < countSameConsecutive_0) /\ (countSameConsecutive_0 <= N))).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: (i <= N) /\ (0 <= i).
  (* Else *)
  Have: N <= i.
  (* Assertion *)
  Have: countSameConsecutive_0 <= i.
}
Prove: !(exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
         ((countSameConsecutive_0 + i_1) < i) /\
         P_all_equal_in_range(Mint_0, x, i_1, x_3)).
Prover Alt-Ergo returns Valid (32ms) (37)

------------------------------------------------------------

Goal Post-condition (file countSameConsecutive5.c, line 41) in 'countSameConsecutive':
Let x_1 = Mint_0[shift_sint32(x, i)].
Let x_2 = Mint_0[shift_sint32(x, i - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(countSameConsecutive_0) /\ is_sint32(i) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (!P_all_equal_in_range(Mint_0, x, i_1, 1 + countSameConsecutive_0)))))).
  (* Invariant *)
  Have: ((0 < i) -> ((i < N) -> (x_1 != x_2))).
  (* Invariant *)
  Have: ((0 < i) ->
      (exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
       P_all_equal_in_range(Mint_0, x, i_1, countSameConsecutive_0))).
  (* Invariant *)
  Have: ((0 < i) -> (0 < countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: ((0 < i) ->
      ((0 < countSameConsecutive_0) /\ (countSameConsecutive_0 <= N))).
  (* Invariant *)
  Have: ((0 = i) -> (0 = countSameConsecutive_0)).
  (* Invariant *)
  Have: (i <= N) /\ (0 <= i).
  (* Else *)
  Have: N <= i.
  (* Assertion *)
  Have: countSameConsecutive_0 <= i.
}
Prove: P_all_smaller_than_best(Mint_0, x, 0, i, countSameConsecutive_0).
Prover Alt-Ergo returns Unknown (336ms)

------------------------------------------------------------

Goal Assertion (file countSameConsecutive5.c, line 46):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 48):
Let x_1 = best_0 + i_1.
Let x_2 = Mint_0[shift_sint32(x, i_1)].
Let x_3 = Mint_0[shift_sint32(x, i_1 - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(best_1) /\
      is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(Mint_0[shift_sint32(x, i)]) /\ is_sint32(x_2) /\
      is_sint32(Mint_0[shift_sint32(x, i - 1)]) /\ is_sint32(x_3).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (!P_all_equal_in_range(Mint_0, x, i_2, 1 + best_1)))))).
  (* Invariant *)
  Have: ((0 < i_1) -> ((i_1 < N) -> (x_2 != x_3))).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (exists i_2 : Z. (0 <= i_2) /\ (i_2 < i_1) /\
       P_all_equal_in_range(Mint_0, x, i_2, best_1))).
  (* Invariant *)
  Have: ((0 < i_1) -> (0 < best_1)).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_1)).
  (* Invariant *)
  Have: ((0 < i_1) -> ((0 < best_1) /\ (best_1 <= N))).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_1)).
  (* Invariant *)
  Have: (i_1 <= N) /\ (0 <= i_1).
  (* Then *)
  Have: i_1 < N.
  (* Invariant *)
  Have: P_all_equal_in_range(Mint_0, x, i_1, i - i_1).
  (* Invariant *)
  Have: (i <= N) /\ (i_1 < i).
  If i < N
  Then {
    Let x_4 = Mint_0[shift_sint32(x, i)].
    (* Else *)
    Have: x_4 != x_2.
    (* Assertion *)
    Have: (x_4 != Mint_0[shift_sint32(x, i - 1)]) /\
        (!P_all_equal_in_range(Mint_0, x, i_1, 1 + i)).
  }
  If (best_1 + i_1) < i
  Then { Have: i = x_1. }
  Else { Have: best_0 = best_1. }
  (* Assertion *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((i_1 <= i_2) -> (i_2 <= x_1))).
  (* Assertion *)
  Have: i <= x_1.
}
Prove: 0 <= i.
Prover Alt-Ergo returns Valid (Qed:12ms) (16ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 48):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 49):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 49):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 50):
Let x_1 = best_0 + i_1.
Let x_2 = Mint_0[shift_sint32(x, i_1)].
Let x_3 = Mint_0[shift_sint32(x, i_1 - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(best_1) /\
      is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(Mint_0[shift_sint32(x, i)]) /\ is_sint32(x_2) /\
      is_sint32(Mint_0[shift_sint32(x, i - 1)]) /\ is_sint32(x_3).
  (* Goal *)
  When: 0 < i.
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (!P_all_equal_in_range(Mint_0, x, i_2, 1 + best_1)))))).
  (* Invariant *)
  Have: ((0 < i_1) -> ((i_1 < N) -> (x_2 != x_3))).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (exists i_2 : Z. (0 <= i_2) /\ (i_2 < i_1) /\
       P_all_equal_in_range(Mint_0, x, i_2, best_1))).
  (* Invariant *)
  Have: ((0 < i_1) -> (0 < best_1)).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_1)).
  (* Invariant *)
  Have: ((0 < i_1) -> ((0 < best_1) /\ (best_1 <= N))).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_1)).
  (* Invariant *)
  Have: (i_1 <= N) /\ (0 <= i_1).
  (* Then *)
  Have: i_1 < N.
  (* Invariant *)
  Have: P_all_equal_in_range(Mint_0, x, i_1, i - i_1).
  (* Invariant *)
  Have: (i <= N) /\ (i_1 < i).
  If i < N
  Then {
    Let x_4 = Mint_0[shift_sint32(x, i)].
    (* Else *)
    Have: x_4 != x_2.
    (* Assertion *)
    Have: (x_4 != Mint_0[shift_sint32(x, i - 1)]) /\
        (!P_all_equal_in_range(Mint_0, x, i_1, 1 + i)).
  }
  If (best_1 + i_1) < i
  Then { Have: i = x_1. }
  Else { Have: best_0 = best_1. }
  (* Assertion *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((i_1 <= i_2) -> (i_2 <= x_1))).
  (* Assertion *)
  Have: i <= x_1.
}
Prove: (0 < best_0) /\ (best_0 <= N).
Prover Alt-Ergo returns Valid (Qed:12ms) (36ms) (61)

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 50):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 51):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 52):
Let x_1 = best_0 + i_1.
Let x_2 = Mint_0[shift_sint32(x, i_1)].
Let x_3 = Mint_0[shift_sint32(x, i_1 - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(i) /\
      is_sint32(i_1) /\ is_sint32(Mint_0[shift_sint32(x, -1)]) /\
      is_sint32(Mint_0[a]) /\ is_sint32(Mint_0[shift_sint32(x, i)]) /\
      is_sint32(x_2) /\ is_sint32(Mint_0[shift_sint32(x, i - 1)]) /\
      is_sint32(x_3).
  (* Residual *)
  When: i <= x_1.
  (* Goal *)
  When: 0 < i.
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (!P_all_equal_in_range(Mint_0, x, i_2, 1 + best_0)))))).
  (* Invariant *)
  Have: ((0 < i_1) -> ((i_1 < N) -> (x_2 != x_3))).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (exists i_2 : Z. (0 <= i_2) /\ (i_2 < i_1) /\
       P_all_equal_in_range(Mint_0, x, i_2, best_0))).
  (* Invariant *)
  Have: ((0 < i_1) -> (0 < best_0)).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_0)).
  (* Invariant *)
  Have: ((0 < i_1) -> ((0 < best_0) /\ (best_0 <= N))).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_0)).
  (* Invariant *)
  Have: (i_1 <= N) /\ (0 <= i_1).
  (* Then *)
  Have: i_1 < N.
  (* Invariant *)
  Have: P_all_equal_in_range(Mint_0, x, i_1, i - i_1).
  (* Invariant *)
  Have: (i <= N) /\ (i_1 < i).
  If i < N
  Then {
    Let x_4 = Mint_0[shift_sint32(x, i)].
    (* Else *)
    Have: x_4 != x_2.
    (* Assertion *)
    Have: (x_4 != Mint_0[shift_sint32(x, i - 1)]) /\
        (!P_all_equal_in_range(Mint_0, x, i_1, 1 + i)).
  }
  (* Assertion *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((i_1 <= i_2) -> (i_2 <= x_1))).
}
Prove: 0 < best_0.
Prover Alt-Ergo returns Valid (Qed:8ms) (12ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 52):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 53):
Let x_1 = best_0 + i_1.
Let x_2 = Mint_0[shift_sint32(x, i_1)].
Let x_3 = Mint_0[shift_sint32(x, i_1 - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(best_1) /\
      is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(Mint_0[shift_sint32(x, i)]) /\ is_sint32(x_2) /\
      is_sint32(Mint_0[shift_sint32(x, i - 1)]) /\ is_sint32(x_3).
  (* Goal *)
  When: 0 < i.
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (!P_all_equal_in_range(Mint_0, x, i_2, 1 + best_1)))))).
  (* Invariant *)
  Have: ((0 < i_1) -> ((i_1 < N) -> (x_2 != x_3))).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (exists i_2 : Z. (0 <= i_2) /\ (i_2 < i_1) /\
       P_all_equal_in_range(Mint_0, x, i_2, best_1))).
  (* Invariant *)
  Have: ((0 < i_1) -> (0 < best_1)).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_1)).
  (* Invariant *)
  Have: ((0 < i_1) -> ((0 < best_1) /\ (best_1 <= N))).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_1)).
  (* Invariant *)
  Have: (i_1 <= N) /\ (0 <= i_1).
  (* Then *)
  Have: i_1 < N.
  (* Invariant *)
  Have: P_all_equal_in_range(Mint_0, x, i_1, i - i_1).
  (* Invariant *)
  Have: (i <= N) /\ (i_1 < i).
  If i < N
  Then {
    Let x_4 = Mint_0[shift_sint32(x, i)].
    (* Else *)
    Have: x_4 != x_2.
    (* Assertion *)
    Have: (x_4 != Mint_0[shift_sint32(x, i - 1)]) /\
        (!P_all_equal_in_range(Mint_0, x, i_1, 1 + i)).
  }
  If (best_1 + i_1) < i
  Then { Have: i = x_1. }
  Else { Have: best_0 = best_1. }
  (* Assertion *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((i_1 <= i_2) -> (i_2 <= x_1))).
  (* Assertion *)
  Have: i <= x_1.
}
Prove: exists i_2 : Z. (0 <= i_2) /\ (i_2 < i) /\
    P_all_equal_in_range(Mint_0, x, i_2, best_0).
Prover Alt-Ergo returns Valid (Qed:12ms) (104ms) (307)

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 53):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 54):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 54):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 55):
Let x_1 = best_0 + i_2.
Let x_2 = Mint_0[shift_sint32(x, i_2)].
Let x_3 = Mint_0[shift_sint32(x, i_2 - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(best_1) /\
      is_sint32(i_1) /\ is_sint32(i_2) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(Mint_0[shift_sint32(x, i_1)]) /\ is_sint32(x_2) /\
      is_sint32(Mint_0[shift_sint32(x, i_1 - 1)]) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 < i_1) /\ (0 <= i) /\ (i < i_1).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i_2) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (!P_all_equal_in_range(Mint_0, x, i_3, 1 + best_1)))))).
  (* Invariant *)
  Have: ((0 < i_2) -> ((i_2 < N) -> (x_2 != x_3))).
  (* Invariant *)
  Have: ((0 < i_2) ->
      (exists i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\
       P_all_equal_in_range(Mint_0, x, i_3, best_1))).
  (* Invariant *)
  Have: ((0 < i_2) -> (0 < best_1)).
  (* Invariant *)
  Have: ((0 = i_2) -> (0 = best_1)).
  (* Invariant *)
  Have: ((0 < i_2) -> ((0 < best_1) /\ (best_1 <= N))).
  (* Invariant *)
  Have: ((0 = i_2) -> (0 = best_1)).
  (* Invariant *)
  Have: (i_2 <= N) /\ (0 <= i_2).
  (* Then *)
  Have: i_2 < N.
  (* Invariant *)
  Have: P_all_equal_in_range(Mint_0, x, i_2, i_1 - i_2).
  (* Invariant *)
  Have: (i_1 <= N) /\ (i_2 < i_1).
  If i_1 < N
  Then {
    Let x_4 = Mint_0[shift_sint32(x, i_1)].
    (* Else *)
    Have: x_4 != x_2.
    (* Assertion *)
    Have: (x_4 != Mint_0[shift_sint32(x, i_1 - 1)]) /\
        (!P_all_equal_in_range(Mint_0, x, i_2, 1 + i_1)).
  }
  If (best_1 + i_2) < i_1
  Then { Have: i_1 = x_1. }
  Else { Have: best_0 = best_1. }
  (* Assertion *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((i_2 <= i_3) -> (i_3 <= x_1))).
  (* Assertion *)
  Have: i_1 <= x_1.
}
Prove: !P_all_equal_in_range(Mint_0, x, i, 1 + best_0).
Prover Alt-Ergo returns Unknown (Qed:12ms) (272ms)

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 55):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 61):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 61):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file countSameConsecutive5.c, line 62):
Let x_1 = Mint_0[shift_sint32(x, i)].
Let x_2 = Mint_0[shift_sint32(x, j)].
Let x_3 = -i.
Let x_4 = Mint_0[shift_sint32(x, i - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(1 + j) /\ is_sint32(Mint_0[shift_sint32(x, -1)]) /\
      is_sint32(Mint_0[a]) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_4).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (!P_all_equal_in_range(Mint_0, x, i_1, 1 + best_0)))))).
  (* Invariant *)
  Have: ((0 < i) -> ((i < N) -> (x_1 != x_4))).
  (* Invariant *)
  Have: ((0 < i) ->
      (exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
       P_all_equal_in_range(Mint_0, x, i_1, best_0))).
  (* Invariant *)
  Have: ((0 < i) -> (0 < best_0)).
  (* Invariant *)
  Have: ((0 = i) -> (0 = best_0)).
  (* Invariant *)
  Have: ((0 < i) -> ((0 < best_0) /\ (best_0 <= N))).
  (* Invariant *)
  Have: ((0 = i) -> (0 = best_0)).
  (* Invariant *)
  Have: (i <= N) /\ (0 <= i).
  (* Then *)
  Have: i < N.
  (* Invariant *)
  Have: P_all_equal_in_range(Mint_0, x, i, j - i).
  (* Invariant *)
  Have: (j <= N) /\ (i < j).
  (* Then *)
  Have: j < N.
  (* Then *)
  Have: x_1 = x_2.
}
Prove: P_all_equal_in_range(Mint_0, x, i, 1 + j - i).
Prover Alt-Ergo returns Valid (24ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file countSameConsecutive5.c, line 62):
Let x_1 = Mint_0[shift_sint32(x, j - 2)].
Let x_2 = j - 1.
Let x_3 = Mint_0[shift_sint32(x, x_2)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(j) /\
      is_sint32(x_2) /\ is_sint32(Mint_0[shift_sint32(x, -1)]) /\
      is_sint32(Mint_0[a]) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((2 <= j) ->
      (forall i : Z. ((0 <= i) -> (((2 + i) <= j) ->
       (!P_all_equal_in_range(Mint_0, x, i, 1 + best_0)))))).
  (* Invariant *)
  Have: ((j <= N) -> ((2 <= j) -> (x_1 != x_3))).
  (* Invariant *)
  Have: ((2 <= j) ->
      (exists i : Z. (0 <= i) /\ ((2 + i) <= j) /\
       P_all_equal_in_range(Mint_0, x, i, best_0))).
  (* Invariant *)
  Have: ((2 <= j) -> (0 < best_0)).
  (* Invariant *)
  Have: ((1 = j) -> (0 = best_0)).
  (* Invariant *)
  Have: ((2 <= j) -> ((0 < best_0) /\ (best_0 <= N))).
  (* Invariant *)
  Have: ((1 = j) -> (0 = best_0)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + N)).
  (* Then *)
  Have: j <= N.
}
Prove: P_all_equal_in_range(Mint_0, x, x_2, 1).
Prover Alt-Ergo returns Valid (Qed:4ms) (16ms) (26)

------------------------------------------------------------

Goal Assertion (file countSameConsecutive5.c, line 67):
Let x_1 = Mint_0[shift_sint32(x, i)].
Let x_2 = Mint_0[shift_sint32(x, j)].
Let x_3 = Mint_0[shift_sint32(x, i - 1)].
Let a = shift_sint32(x, 0).
Let x_4 = Mint_0[shift_sint32(x, j - 1)].
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4).
  (* Residual *)
  When: j < N.
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (!P_all_equal_in_range(Mint_0, x, i_1, 1 + best_0)))))).
  (* Invariant *)
  Have: ((0 < i) -> ((i < N) -> (x_1 != x_3))).
  (* Invariant *)
  Have: ((0 < i) ->
      (exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
       P_all_equal_in_range(Mint_0, x, i_1, best_0))).
  (* Invariant *)
  Have: ((0 < i) -> (0 < best_0)).
  (* Invariant *)
  Have: ((0 = i) -> (0 = best_0)).
  (* Invariant *)
  Have: ((0 < i) -> ((0 < best_0) /\ (best_0 <= N))).
  (* Invariant *)
  Have: ((0 = i) -> (0 = best_0)).
  (* Invariant *)
  Have: (i <= N) /\ (0 <= i).
  (* Then *)
  Have: i < N.
  (* Invariant *)
  Have: P_all_equal_in_range(Mint_0, x, i, j - i).
  (* Invariant *)
  Have: i < j.
  (* Else *)
  Have: x_1 != x_2.
}
Prove: (x_2 != x_4) /\ (!P_all_equal_in_range(Mint_0, x, i, 1 + j)).
Prover Alt-Ergo returns Valid (Qed:4ms) (36ms) (136)

------------------------------------------------------------

Goal Assertion (file countSameConsecutive5.c, line 70):
Let x_1 = Mint_0[shift_sint32(x, i_1)].
Let x_2 = Mint_0[shift_sint32(x, i_1 - 1)].
Let a = shift_sint32(x, 0).
Let x_3 = best_0 + i_1.
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(i_1) /\
      is_sint32(j) /\ is_sint32(Mint_0[shift_sint32(x, -1)]) /\
      is_sint32(Mint_0[a]) /\ is_sint32(x_1) /\
      is_sint32(Mint_0[shift_sint32(x, j)]) /\ is_sint32(x_2) /\
      is_sint32(Mint_0[shift_sint32(x, j - 1)]).
  (* Residual *)
  When: j <= x_3.
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (!P_all_equal_in_range(Mint_0, x, i_2, 1 + best_0)))))).
  (* Invariant *)
  Have: ((0 < i_1) -> ((i_1 < N) -> (x_1 != x_2))).
  (* Invariant *)
  Have: ((0 < i_1) ->
      (exists i_2 : Z. (0 <= i_2) /\ (i_2 < i_1) /\
       P_all_equal_in_range(Mint_0, x, i_2, best_0))).
  (* Invariant *)
  Have: ((0 < i_1) -> (0 < best_0)).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_0)).
  (* Invariant *)
  Have: ((0 < i_1) -> ((0 < best_0) /\ (best_0 <= N))).
  (* Invariant *)
  Have: ((0 = i_1) -> (0 = best_0)).
  (* Invariant *)
  Have: (i_1 <= N) /\ (0 <= i_1).
  (* Then *)
  Have: i_1 < N.
  (* Invariant *)
  Have: P_all_equal_in_range(Mint_0, x, i_1, j - i_1).
  (* Invariant *)
  Have: (j <= N) /\ (i_1 < j).
  If j < N
  Then {
    Let x_4 = Mint_0[shift_sint32(x, j)].
    (* Else *)
    Have: x_1 != x_4.
    (* Assertion *)
    Have: (x_4 != Mint_0[shift_sint32(x, j - 1)]) /\
        (!P_all_equal_in_range(Mint_0, x, i_1, 1 + j)).
  }
}
Prove: i <= x_3.
Prover Alt-Ergo returns Valid (Qed:8ms) (16ms) (35)

------------------------------------------------------------

Goal Assertion (file countSameConsecutive5.c, line 71):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Assertion (file countSameConsecutive5.c, line 75):
Let x_1 = Mint_0[shift_sint32(x, i)].
Let x_2 = Mint_0[shift_sint32(x, i - 1)].
Let a = shift_sint32(x, 0).
Assume {
  Type: is_sint32(N) /\ is_sint32(best_0) /\ is_sint32(i) /\
      is_sint32(Mint_0[shift_sint32(x, -1)]) /\ is_sint32(Mint_0[a]) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Have: (region(x.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < N.
  (* Pre-condition *)
  Have: N <= 1000000.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, N).
  (* Invariant *)
  Have: ((0 < i) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (!P_all_equal_in_range(Mint_0, x, i_1, 1 + best_0)))))).
  (* Invariant *)
  Have: ((0 < i) -> ((i < N) -> (x_1 != x_2))).
  (* Invariant *)
  Have: ((0 < i) ->
      (exists i_1 : Z. (0 <= i_1) /\ (i_1 < i) /\
       P_all_equal_in_range(Mint_0, x, i_1, best_0))).
  (* Invariant *)
  Have: ((0 < i) -> (0 < best_0)).
  (* Invariant *)
  Have: ((0 = i) -> (0 = best_0)).
  (* Invariant *)
  Have: ((0 < i) -> ((0 < best_0) /\ (best_0 <= N))).
  (* Invariant *)
  Have: ((0 = i) -> (0 = best_0)).
  (* Invariant *)
  Have: (i <= N) /\ (0 <= i).
  (* Else *)
  Have: N <= i.
}
Prove: best_0 <= i.
Prover Alt-Ergo returns Valid (12ms) (28)

------------------------------------------------------------

Goal Loop assigns (file countSameConsecutive5.c, line 56) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file countSameConsecutive5.c, line 56) (2/3):
Effect at line 60
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file countSameConsecutive5.c, line 56) (3/3):
Effect at line 66
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file countSameConsecutive5.c, line 63):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Decreasing of Loop variant at loop (file countSameConsecutive5.c, line 59):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Positivity of Loop variant at loop (file countSameConsecutive5.c, line 59):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Decreasing of Loop variant at loop (file countSameConsecutive5.c, line 66):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Positivity of Loop variant at loop (file countSameConsecutive5.c, line 66):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'countSameConsecutive'
--------------------------------------------------------------------------------

[ Partial ] Post-condition (file countSameConsecutive5.c, line 29)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[    -    ] Post-condition (file countSameConsecutive5.c, line 31)
            tried with Wp.typed.
[    -    ] Post-condition (file countSameConsecutive5.c, line 33)
            tried with Wp.typed.
[ Partial ] Post-condition (file countSameConsecutive5.c, line 35)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[    -    ] Post-condition (file countSameConsecutive5.c, line 37)
            tried with Wp.typed.
[ Partial ] Post-condition (file countSameConsecutive5.c, line 39)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[    -    ] Post-condition (file countSameConsecutive5.c, line 41)
            tried with Wp.typed.
[ Partial ] Loop assigns (file countSameConsecutive5.c, line 56)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Loop assigns (file countSameConsecutive5.c, line 63)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Loop variant at loop (file countSameConsecutive5.c, line 59)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Loop variant at loop (file countSameConsecutive5.c, line 66)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[  Valid  ] Assertion (file countSameConsecutive5.c, line 46)
            by Wp.typed.
[ Partial ] Invariant (file countSameConsecutive5.c, line 48)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Invariant (file countSameConsecutive5.c, line 49)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Invariant (file countSameConsecutive5.c, line 50)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Invariant (file countSameConsecutive5.c, line 51)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Invariant (file countSameConsecutive5.c, line 52)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Invariant (file countSameConsecutive5.c, line 53)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Invariant (file countSameConsecutive5.c, line 54)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[    -    ] Invariant (file countSameConsecutive5.c, line 55)
            tried with Wp.typed.
[ Partial ] Invariant (file countSameConsecutive5.c, line 61)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Invariant (file countSameConsecutive5.c, line 62)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Assertion (file countSameConsecutive5.c, line 67)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Assertion (file countSameConsecutive5.c, line 70)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Assertion (file countSameConsecutive5.c, line 71)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[ Partial ] Assertion (file countSameConsecutive5.c, line 75)
            By Wp.typed, with pending:
             - Invariant (file countSameConsecutive5.c, line 55)
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
    20 Locally validated
     6 To be validated
    27 Total
--------------------------------------------------------------------------------
